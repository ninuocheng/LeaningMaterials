# # 格式化字符串的详细格式
# # eg {0:*<20}
# # : 引导符号  填充的字符
# # < 左对齐 > 右对齐  ^ 居中对齐
# # 字符串的输出宽度
# # , 数字的千位分隔符
# # .精度  浮点数小数部分的精度或字符串的最大输出长度
# # 类型 整数类型 b\d\o\x\X 对应的是二进制 十进制 八进制 十六进制
# #      浮点数类型 e\E\f\% 科学计数法
# s = 'helloworld'
# print('{0:*<20}'.format(s))
# print('{0:*>20}'.format(s))
# print('{0:*^20}'.format(s))
#
# print(s.ljust(20,'*'))
# print(s.rjust(20,'*'))
# print(s.center(20,'*'))
#
# # 千位分隔符（只适用于整数或浮点数）
d = 987654321
f = 987654321.78965
# print('{0:,}'.format(d))
print('{0:,.2f}'.format(f))
# 浮点数小数部分的精度
f = 3.1415926
print('{0:.2f}'.format(f))
# # 字符串类型 .表示是最大的显示长度
# s = 'hello world'
# print('{0:.5}'.format(s))
# # 整数类型
# a = 425
# print('二进制:{0:b}，十进制:{0:d}，八进制:{0:o}，十六进制:{0:x}，十六进制：{0:X}'.format(a))
# # 浮点数类型
b = 3.1415926
print('{0:.2f},{0:.2E},{0:.2e},{0:.2%}'.format(b))
# a = 2612313645373266329776/1024/1024/1024/1024/1024/1024
# print(a,type(a))
# print('{0:.6f}'.format(a))